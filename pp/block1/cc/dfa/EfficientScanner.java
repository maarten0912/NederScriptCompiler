package pp.block1.cc.dfa;

import java.util.ArrayList;
import java.util.List;

/** Algorithm interface for generating a list of tokens. */
public class EfficientScanner implements Scanner {
	/**
	 * Returns the list of tokens generated by a given DFA when scanning a given
	 * input text; or <code>null</code> if the input text is not accepted.
	 * Scanning is greedy; i.e., it should always return the longest acceptable
	 * token.
	 */
	public List<String> scan(State dfa, String text) {
		State state = dfa;
		ArrayList<String> stack = new ArrayList<>();
		List<String> tokens = new ArrayList<String>();

		while (!text.equals("")) {
			int i = 0;
			while (i < text.length()) {
				char c = text.charAt(i);
				i++;
				if (state.hasNext(c)) {
					state = state.getNext(c);
				} else {
					break; // errorstate
				}
				if (state.isAccepting()) {
					stack.add(text.substring(0,i));
				}
			}

			if (!stack.isEmpty()) {
				String token = stack.get(stack.size() - 1);
				tokens.add(token);
				state = dfa;

				if (token.length() > text.length()) {
					return null;
				}

				text = text.substring(token.length());
			} else if (!state.isAccepting()) {
				return null;
			}
		}

		return tokens;
	}
}
